@using Microsoft.Ajax.Utilities
@using MyTaskManagement.Core.Domain
@model MyTaskManagement.Core.ViewModel.CreateProjectViewModels

@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";  
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Project", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Project</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Project.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Project.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Project.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Project.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Project.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Project.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Project.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Project.DeadTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Project.DeadTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Project.DeadTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Project.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Project.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Project.Description, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <label class="control-label col-md-2">Manager</label>
            <select name="ManagerId" class="col-md-10 form-control" required>
 
                @foreach (var c in Model.Users.ToList())
                {
                    if (c.Id == Model.Manager.Id)
                    {
                        <option value="@c.Id" selected="selected">@c.FirstName</option>

                    }
                    else
                    {
                        <option value="@c.Id">@c.FirstName</option>

                    }

                }

            </select>

        </div>

        <div class="form-group">
            @Html.Label("Icon ", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.Project. ProjectFiles.Any(f => f.MyFileType == MyFileType.Photo  ))
                { 
                       var imgPath = @Model.Project.ProjectFiles.LastOrDefault(f => f.MyFileType == MyFileType.Photo).FileName;
               
                        <img src="~/images/@imgPath" alt="" width="300"  height="200"/>
                     
                }
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Icon ", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="Photo" name="upload" accept="image/*" />
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>


}
     
<p>_________________________________ Users On Project_______________________________</p>
@if (Model.Project.Users.Count == 0)
{
    <p>There Are No Users Work on this project</p>
}
else
{
    foreach (var applicationUser in Model.Project.Users)
    {
        <div>

            <button type="button" class="btn btn-lg btn-primary" disabled>@applicationUser.FirstName</button>
            @Html.ActionLink("Delete", "DeleteUser", new { idUser = applicationUser.Id, idProject = Model.Project.Id }, new { @class = "btn btn-danger" })


        </div>

    }

}


<p>_________________________________All Users_________________________________ </p>


@foreach (var applicationUser in Model.Users)
{
    <div>
        @if (!Model.Project.Users.Contains(applicationUser))
        {
            <button type="button" class="btn btn-lg btn-primary" disabled>@applicationUser.FirstName</button>
            @Html.ActionLink("Add", "AddUserToProject", new { idUser = applicationUser.Id, idProject = Model.Project.Id }, new { @class = "btn btn-success" })


        }


    </div>

}



<p>______________________________All Tasks__________________________________</p>


<div>
    @Html.ActionLink("Add Task", "Create", "TTask", new { id_current_project = Model.Project.Id }, htmlAttributes: new { @class = "btn btn-warning" })
</div>


@{
    var tasksForCurrentProject = Model.Project.Tasks.ToList();

}
@Html.Partial("_AllTaskPartial", tasksForCurrentProject)


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}

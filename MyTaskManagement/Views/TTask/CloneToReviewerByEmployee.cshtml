@using MyTaskManagement.Core.Domain
@using MyTaskManagement.Models
@model MyTaskManagement.Core.ViewModel.CreateTaskViewModel
@{
    /**/

    ViewBag.Title = "CloneToReviewer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Clone To Reviewer</h2>

@if (!Model.Task.Status.Equals(StatusEnum.Ended))
{
    <h5> You should have change the status of task to #Ended !</h5>
}
@*else if (!Model.Task.TypeTask.Equals(TypeTaskEnum.Review))
{

    <h5> You should have change the Type of task to #Review to be able to clone !</h5>

}*@
else
{
    using (Html.BeginForm())
    {


        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Task.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Title, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Task.Owner, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Owner, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Owner, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group  " hidden>
                @Html.LabelFor(model => model.Task.Creator, htmlAttributes: new { @class = "control-label col-md-2"  })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Creator, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Creator, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Task.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.StartTime, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Task.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Task.EstimatedTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.EstimatedTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.EstimatedTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Task.EffortHours, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.EffortHours, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.EffortHours, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Task.Ticket, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Ticket, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Ticket, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Task.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Notes, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2  " for="__ProjectId__">Project</label>
                <select name="__ProjectId__" class="col-md-10 form-control ">
                    <option value="" disabled selected>Choose A Project</option>

                    @foreach (var p in Model.Projects)
                    {
                        if (p.Id == Model.Task.ProjectId)
                        {
                            <option value="@p.Id" selected="selected">@p.Name</option>


                        }
                        else
                        {
                            <option value="@p.Id">@p.Name</option>


                        }

                    }

                </select>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Task.Priority, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.Task.Priority, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Task.Priority, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.Task.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.Task.Status, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Task.Status, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Task.TypeTask, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.Task.TypeTask, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Task.TypeTask, "", new { @class = "text-danger" })
                </div>
            </div>*@





            <div class="form-group">
                <label class="control-label col-md-2">Assigned To</label>
                <select name="__UserId__" class="col-md-10 form-control" required>

                    @foreach (var c in Model.Users.ToList())
                    {
                        if (c.Id == Model.Task.ReviewerId)
                        {
                            <option value="@c.Id" selected="selected">@c.FirstName</option>

                        }
                        else
                        {
                            <option value="@c.Id">@c.FirstName</option>

                        }

                    }

                </select>

            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

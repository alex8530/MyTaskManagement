@using System.Web.UI.WebControls
@using MyTaskManagement.Core.Domain
@using MyTaskManagement.Models
@model MyTaskManagement.Core.ViewModel.CreateTaskViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Create";
}

<h2>Create Task</h2>


@using (Html.BeginForm())
{


    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Task.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.Title, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Task.Owner, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.Owner, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.Owner, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Task.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.EstimatedTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.EstimatedTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.EstimatedTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.EffortHours, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.EffortHours, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.EffortHours, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.Ticket, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.Ticket, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.Ticket, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Task.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.Notes, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (@ViewBag.fromTask.Equals("yes"))
        {
            <div class="form-group">
                <label class="control-label col-md-2  " for="__ProjectId__">Project</label>
                <select name="__ProjectId__" class="col-md-10 form-control ">
                    <option value="" disabled selected>Choose A Project</option>

                    @foreach (var p in Model.Projects)
                    {

                        <option value="@p.Id">@p.Name</option>

                    }

                </select>
            </div>


        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Task.ProjectId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.ProjectId, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Task.ProjectId, "", new { @class = "text-danger" })
                </div>
            </div>

        }


        <div class="form-group">
            <label class="control-label col-md-2 ">Status</label>
            @{
                var values = Enum.GetValues(typeof(StatusEnum));
            }

            <select name="status" class="col-md-10 form-control ">
                <option value="" disabled selected>Choose Status</option>

                @foreach (var status in values)
                {
                    int i = status.GetHashCode();

                    <option value="@i">@status</option>


                }

            </select>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2 ">Type</label>
            @{
                var valuesTypeTaskEnum = Enum.GetValues(typeof(TypeTaskEnum));
            }

            <select name="type" class="col-md-10 form-control ">
                <option value="" disabled selected>Choose type</option>

                @foreach (var t in valuesTypeTaskEnum)
                {
                    int i = t.GetHashCode();

                    <option value="@i">@t</option>


                }

            </select>
        </div>



        <div class="form-group">
            <label class="control-label col-md-2  ">Priority</label>
            @{
                var valPriority = Enum.GetValues(typeof(PriorityEnum));
            }

            <select name="priority" class="col-md-10 form-control ">
                <option value="" disabled selected>Choose Priority</option>

                @foreach (var p in valPriority)
                {
                    int i = p.GetHashCode();

                    <option value="@i">@p</option>


                }

            </select>
        </div>


        <div class="form-group">
            <label class="control-label col-md-2  " for="__UserId__">Assigne To</label>
            <select name="__UserId__" class="col-md-10 form-control ">
                <option value="" disabled selected>Choose your Employees</option>

                @foreach (var u in Model.Users)
                {

                    <option value="@u.Id">@u.FirstName</option>

                }

            </select>
        </div>


        <div class="form-group">
            <label class="control-label col-md-2  " for="__ReviewerId__">Reviewer</label>
            <select name="__ReviewerId__" class="col-md-10 form-control ">
                <option value="" disabled selected>Choose your Reviewer</option>

                @foreach (var u in Model.Users)
                {

                    <option value="@u.Id">@u.FirstName</option>

                }

            </select>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@model MyTaskManagement.Core.ViewModel.EditTaskViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">


        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Task.Id)
        @* i need these id's to financail *@
        @Html.Hidden("ProjectId", Model.Task.ProjectId)
        @Html.Hidden("ApplicationUserId", Model.Task.ApplicationUser.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Task.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.Priority, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Task.Priority, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Task.Priority, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Task.Status, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Task.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.DeadTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.DeadTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.DeadTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Task.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Task.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Task.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
                @Html.LabelFor(model => model.Task.EstimatedTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.EstimatedTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.EstimatedTime, "", new { @class = "text-danger" })
                </div>
         </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Task.EffortHours, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.EffortHours, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.EffortHours, "", new { @class = "text-danger" })
                </div>
            </div> 
         
            <div class="form-group">
                @Html.LabelFor(model => model.Task.Ticket, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Ticket, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Ticket, "", new { @class = "text-danger" })
                </div>
            </div> 
         
            <div class="form-group">
                @Html.LabelFor(model => model.Task.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Task.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Task.Notes, "", new { @class = "text-danger" })
                </div>
            </div> 
         

         <p>_________________________________ User  On Task _______________________________</p>
            @if (Model.Task.ApplicationUser== null  )
            {
                <p>There Are No Users Work on this Task  </p>
            }
            else
            {
                 <div>

                     <button type="button" class="btn btn-lg btn-primary" disabled> @Model.Task.ApplicationUser.FirstName</button>
                     @Html.ActionLink("Delete", "DeleteUserFromTask", new { idUser = @Model.Task.ApplicationUser.Id, idTask= Model.Task.Id }, new { @class = "btn btn-danger" }) 


                    </div>

                 

            }


            <p>_________________________________All Users_________________________________ </p>


            @foreach (var applicationUser in Model.Users)
            {
                <div>
                    @if ( Model.Task.ApplicationUser != applicationUser)
                    {
                        <button type="button" class="btn btn-lg btn-primary" disabled>@applicationUser.FirstName</button>
                        @Html.ActionLink("Add", "AddUserToTask", new { idUser = applicationUser.Id, idTask = Model.Task.Id }, new { @class = "btn btn-success" }) 


                    }


                </div>

            } 


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

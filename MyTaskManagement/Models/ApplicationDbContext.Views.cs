//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MyTaskManagement.Models.ApplicationDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets3e90f3b08b1dc7be65fb3fca3186964d38f2193a509ebd6e703a82d1e0ca07ff))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets3e90f3b08b1dc7be65fb3fca3186964d38f2193a509ebd6e703a82d1e0ca07ff : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "3e90f3b08b1dc7be65fb3fca3186964d38f2193a509ebd6e703a82d1e0ca07ff"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Client")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Project")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.TTask")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.ApplicationUser")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserClaim")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Financialstatus")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserLogin")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.MyFile")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserRole")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.IdentityRole")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.ApplicationUserProject")
            {
                return GetView10();
            }

            if (extentName == "ApplicationDbContext.Clients")
            {
                return GetView11();
            }

            if (extentName == "ApplicationDbContext.Projects")
            {
                return GetView12();
            }

            if (extentName == "ApplicationDbContext.Tasks")
            {
                return GetView13();
            }

            if (extentName == "ApplicationDbContext.ApplicationUser_Tasks")
            {
                return GetView14();
            }

            if (extentName == "ApplicationDbContext.Users")
            {
                return GetView15();
            }

            if (extentName == "ApplicationDbContext.IdentityUserClaims")
            {
                return GetView16();
            }

            if (extentName == "ApplicationDbContext.Financialstatuses")
            {
                return GetView17();
            }

            if (extentName == "ApplicationDbContext.IdentityUserLogins")
            {
                return GetView18();
            }

            if (extentName == "ApplicationDbContext.MyFiles")
            {
                return GetView19();
            }

            if (extentName == "ApplicationDbContext.IdentityUserRoles")
            {
                return GetView20();
            }

            if (extentName == "ApplicationDbContext.Roles")
            {
                return GetView21();
            }

            if (extentName == "ApplicationDbContext.ApplicationUser_Projects")
            {
                return GetView22();
            }

            if (extentName == "CodeFirstDatabase.ManagerProjectsTable")
            {
                return GetView23();
            }

            if (extentName == "ApplicationDbContext.ManagerProjectsTables")
            {
                return GetView24();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Client.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Client
        [CodeFirstDatabaseSchema.Client](T1.Client_Id, T1.Client_Name, T1.Client_Address, T1.Client_Email, T1.Client_AdditionInformation)
    FROM (
        SELECT 
            T.Id AS Client_Id, 
            T.Name AS Client_Name, 
            T.Address AS Client_Address, 
            T.Email AS Client_Email, 
            T.AdditionInformation AS Client_AdditionInformation, 
            True AS _from0
        FROM ApplicationDbContext.Clients AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Project.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Project
        [CodeFirstDatabaseSchema.Project](T1.Project_Id, T1.Project_Name, T1.Project_StartTime, T1.Project_DeadTime, T1.Project_Description, T1.Project_Status, T1.Project_ClientId)
    FROM (
        SELECT 
            T.Id AS Project_Id, 
            T.Name AS Project_Name, 
            T.StartTime AS Project_StartTime, 
            T.DeadTime AS Project_DeadTime, 
            T.Description AS Project_Description, 
            CAST(T.Status AS [Edm.Int32]) AS Project_Status, 
            T.ClientId AS Project_ClientId, 
            True AS _from0
        FROM ApplicationDbContext.Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TTask.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TTask
        [CodeFirstDatabaseSchema.TTask](T3.TTask_Id, T3.TTask_Name, T3.TTask_Priority, T3.TTask_Status, T3.TTask_StartTime, T3.TTask_Description, T3.TTask_EstimatedTime, T3.TTask_EffortHours, T3.TTask_Ticket, T3.TTask_Notes, T3.TTask_Owner, T3.TTask_ProjectId, T3.[TTask.ApplicationUser_Id])
    FROM (
        SELECT T1.TTask_Id, T1.TTask_Name, T1.TTask_Priority, T1.TTask_Status, T1.TTask_StartTime, T1.TTask_Description, T1.TTask_EstimatedTime, T1.TTask_EffortHours, T1.TTask_Ticket, T1.TTask_Notes, T1.TTask_Owner, T1.TTask_ProjectId, T2.[TTask.ApplicationUser_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS TTask_Id, 
                T.Name AS TTask_Name, 
                CAST(T.Priority AS [Edm.Int32]) AS TTask_Priority, 
                CAST(T.Status AS [Edm.Int32]) AS TTask_Status, 
                T.StartTime AS TTask_StartTime, 
                T.Description AS TTask_Description, 
                T.EstimatedTime AS TTask_EstimatedTime, 
                T.EffortHours AS TTask_EffortHours, 
                T.Ticket AS TTask_Ticket, 
                T.Notes AS TTask_Notes, 
                T.Owner AS TTask_Owner, 
                T.ProjectId AS TTask_ProjectId, 
                True AS _from0
            FROM ApplicationDbContext.Tasks AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ApplicationUser_Tasks_Target).Id AS TTask_Id, 
                Key(T.ApplicationUser_Tasks_Source).Id AS [TTask.ApplicationUser_Id], 
                True AS _from1
            FROM ApplicationDbContext.ApplicationUser_Tasks AS T) AS T2
            ON T1.TTask_Id = T2.TTask_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ApplicationUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser
        [CodeFirstDatabaseSchema.ApplicationUser](T1.ApplicationUser_Id, T1.ApplicationUser_IsAcceptedOnCondition, T1.ApplicationUser_FirstName, T1.ApplicationUser_LastName, T1.ApplicationUser_JopTitle, T1.ApplicationUser_HourlyRate, T1.[ApplicationUser.O_T_H_Rate], T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName)
    FROM (
        SELECT 
            T.Id AS ApplicationUser_Id, 
            T.IsAcceptedOnCondition AS ApplicationUser_IsAcceptedOnCondition, 
            T.FirstName AS ApplicationUser_FirstName, 
            T.LastName AS ApplicationUser_LastName, 
            T.JopTitle AS ApplicationUser_JopTitle, 
            T.HourlyRate AS ApplicationUser_HourlyRate, 
            T.O_T_H_Rate AS [ApplicationUser.O_T_H_Rate], 
            T.Email AS ApplicationUser_Email, 
            T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
            T.PasswordHash AS ApplicationUser_PasswordHash, 
            T.SecurityStamp AS ApplicationUser_SecurityStamp, 
            T.PhoneNumber AS ApplicationUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
            T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
            T.UserName AS ApplicationUser_UserName, 
            True AS _from0
        FROM ApplicationDbContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Financialstatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Financialstatus
        [CodeFirstDatabaseSchema.Financialstatus](T1.Financialstatus_Id, T1.Financialstatus_Date, T1.Financialstatus_EstimatedHours, T1.Financialstatus_EffortHours, T1.Financialstatus_Total, T1.[Financialstatus.pro__id], T1.[Financialstatus.task__id], T1.[Financialstatus.user__id])
    FROM (
        SELECT 
            T.Id AS Financialstatus_Id, 
            T.Date AS Financialstatus_Date, 
            T.EstimatedHours AS Financialstatus_EstimatedHours, 
            T.EffortHours AS Financialstatus_EffortHours, 
            T.Total AS Financialstatus_Total, 
            T.pro__id AS [Financialstatus.pro__id], 
            T.task__id AS [Financialstatus.task__id], 
            T.user__id AS [Financialstatus.user__id], 
            True AS _from0
        FROM ApplicationDbContext.Financialstatuses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.MyFile.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MyFile
        [CodeFirstDatabaseSchema.MyFile](T1.MyFile_Id, T1.MyFile_FileName, T1.MyFile_MyFileType, T1.MyFile_UserFileId)
    FROM (
        SELECT 
            T.Id AS MyFile_Id, 
            T.FileName AS MyFile_FileName, 
            CAST(T.MyFileType AS [Edm.Int32]) AS MyFile_MyFileType, 
            T.UserFileId AS MyFile_UserFileId, 
            True AS _from0
        FROM ApplicationDbContext.MyFiles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM ApplicationDbContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ApplicationUserProject.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUserProject
        [CodeFirstDatabaseSchema.ApplicationUserProject](T1.[ApplicationUserProject.ApplicationUser_Id], T1.[ApplicationUserProject.Project_Id])
    FROM (
        SELECT 
            Key(T.ApplicationUser_Projects_Source).Id AS [ApplicationUserProject.ApplicationUser_Id], 
            Key(T.ApplicationUser_Projects_Target).Id AS [ApplicationUserProject.Project_Id], 
            True AS _from0
        FROM ApplicationDbContext.ApplicationUser_Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Clients.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Clients
        [MyTaskManagement.Models.Client](T1.Client_Id, T1.Client_Name, T1.Client_Address, T1.Client_Email, T1.Client_AdditionInformation)
    FROM (
        SELECT 
            T.Id AS Client_Id, 
            T.Name AS Client_Name, 
            T.Address AS Client_Address, 
            T.Email AS Client_Email, 
            T.AdditionInformation AS Client_AdditionInformation, 
            True AS _from0
        FROM CodeFirstDatabase.Client AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Projects
        [MyTaskManagement.Models.Project](T1.Project_Id, T1.Project_Name, T1.Project_StartTime, T1.Project_DeadTime, T1.Project_Description, T1.Project_Status, T1.Project_ClientId)
    FROM (
        SELECT 
            T.Id AS Project_Id, 
            T.Name AS Project_Name, 
            T.StartTime AS Project_StartTime, 
            T.DeadTime AS Project_DeadTime, 
            T.Description AS Project_Description, 
            CAST(T.Status AS [MyTaskManagement.Models.StatusEnum]) AS Project_Status, 
            T.ClientId AS Project_ClientId, 
            True AS _from0
        FROM CodeFirstDatabase.Project AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Tasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tasks
        [MyTaskManagement.Models.TTask](T1.TTask_Id, T1.TTask_Name, T1.TTask_Priority, T1.TTask_Status, T1.TTask_StartTime, T1.TTask_Description, T1.TTask_EstimatedTime, T1.TTask_EffortHours, T1.TTask_Ticket, T1.TTask_Notes, T1.TTask_Owner, T1.TTask_ProjectId) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.Users, ROW(T1.[ApplicationUser_Tasks.ApplicationUser_Tasks_Source.Id]),[MyTaskManagement.Models.ApplicationUser]),[MyTaskManagement.Models.ApplicationUser_Tasks],ApplicationUser_Tasks_Target,ApplicationUser_Tasks_Source) 
    FROM (
        SELECT 
            T.Id AS TTask_Id, 
            T.Name AS TTask_Name, 
            CAST(T.Priority AS [MyTaskManagement.Models.PriorityEnum]) AS TTask_Priority, 
            CAST(T.Status AS [MyTaskManagement.Models.StatusEnum]) AS TTask_Status, 
            T.StartTime AS TTask_StartTime, 
            T.Description AS TTask_Description, 
            T.EstimatedTime AS TTask_EstimatedTime, 
            T.EffortHours AS TTask_EffortHours, 
            T.Ticket AS TTask_Ticket, 
            T.Notes AS TTask_Notes, 
            T.Owner AS TTask_Owner, 
            T.ProjectId AS TTask_ProjectId, 
            True AS _from0, 
            T.ApplicationUser_Id AS [ApplicationUser_Tasks.ApplicationUser_Tasks_Source.Id]
        FROM CodeFirstDatabase.TTask AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.ApplicationUser_Tasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser_Tasks
        [MyTaskManagement.Models.ApplicationUser_Tasks](T3.[ApplicationUser_Tasks.ApplicationUser_Tasks_Source], T3.[ApplicationUser_Tasks.ApplicationUser_Tasks_Target])
    FROM (
        SELECT -- Constructing ApplicationUser_Tasks_Source
            CreateRef(ApplicationDbContext.Users, row(T2.[ApplicationUser_Tasks.ApplicationUser_Tasks_Source.Id]), [MyTaskManagement.Models.ApplicationUser]) AS [ApplicationUser_Tasks.ApplicationUser_Tasks_Source], 
            T2.[ApplicationUser_Tasks.ApplicationUser_Tasks_Target]
        FROM (
            SELECT -- Constructing ApplicationUser_Tasks_Target
                T1.[ApplicationUser_Tasks.ApplicationUser_Tasks_Source.Id], 
                CreateRef(ApplicationDbContext.Tasks, row(T1.[ApplicationUser_Tasks.ApplicationUser_Tasks_Target.Id]), [MyTaskManagement.Models.TTask]) AS [ApplicationUser_Tasks.ApplicationUser_Tasks_Target]
            FROM (
                SELECT 
                    T.ApplicationUser_Id AS [ApplicationUser_Tasks.ApplicationUser_Tasks_Source.Id], 
                    T.Id AS [ApplicationUser_Tasks.ApplicationUser_Tasks_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.TTask AS T
                WHERE T.ApplicationUser_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [MyTaskManagement.Models.ApplicationUser](T1.ApplicationUser_Id, T1.ApplicationUser_IsAcceptedOnCondition, T1.ApplicationUser_FirstName, T1.ApplicationUser_LastName, T1.ApplicationUser_JopTitle, T1.ApplicationUser_HourlyRate, T1.[ApplicationUser.O_T_H_Rate], T1.ApplicationUser_Email, T1.ApplicationUser_EmailConfirmed, T1.ApplicationUser_PasswordHash, T1.ApplicationUser_SecurityStamp, T1.ApplicationUser_PhoneNumber, T1.ApplicationUser_PhoneNumberConfirmed, T1.ApplicationUser_TwoFactorEnabled, T1.ApplicationUser_LockoutEndDateUtc, T1.ApplicationUser_LockoutEnabled, T1.ApplicationUser_AccessFailedCount, T1.ApplicationUser_UserName)
    FROM (
        SELECT 
            T.Id AS ApplicationUser_Id, 
            T.IsAcceptedOnCondition AS ApplicationUser_IsAcceptedOnCondition, 
            T.FirstName AS ApplicationUser_FirstName, 
            T.LastName AS ApplicationUser_LastName, 
            T.JopTitle AS ApplicationUser_JopTitle, 
            T.HourlyRate AS ApplicationUser_HourlyRate, 
            T.O_T_H_Rate AS [ApplicationUser.O_T_H_Rate], 
            T.Email AS ApplicationUser_Email, 
            T.EmailConfirmed AS ApplicationUser_EmailConfirmed, 
            T.PasswordHash AS ApplicationUser_PasswordHash, 
            T.SecurityStamp AS ApplicationUser_SecurityStamp, 
            T.PhoneNumber AS ApplicationUser_PhoneNumber, 
            T.PhoneNumberConfirmed AS ApplicationUser_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS ApplicationUser_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS ApplicationUser_LockoutEndDateUtc, 
            T.LockoutEnabled AS ApplicationUser_LockoutEnabled, 
            T.AccessFailedCount AS ApplicationUser_AccessFailedCount, 
            T.UserName AS ApplicationUser_UserName, 
            True AS _from0
        FROM CodeFirstDatabase.ApplicationUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaims
        [MyTaskManagement.Models.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Financialstatuses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Financialstatuses
        [MyTaskManagement.Models.Financialstatus](T1.Financialstatus_Id, T1.Financialstatus_Date, T1.Financialstatus_EstimatedHours, T1.Financialstatus_EffortHours, T1.Financialstatus_Total, T1.[Financialstatus.pro__id], T1.[Financialstatus.task__id], T1.[Financialstatus.user__id])
    FROM (
        SELECT 
            T.Id AS Financialstatus_Id, 
            T.Date AS Financialstatus_Date, 
            T.EstimatedHours AS Financialstatus_EstimatedHours, 
            T.EffortHours AS Financialstatus_EffortHours, 
            T.Total AS Financialstatus_Total, 
            T.pro__id AS [Financialstatus.pro__id], 
            T.task__id AS [Financialstatus.task__id], 
            T.user__id AS [Financialstatus.user__id], 
            True AS _from0
        FROM CodeFirstDatabase.Financialstatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogins
        [MyTaskManagement.Models.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.MyFiles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MyFiles
        [MyTaskManagement.Models.MyFile](T1.MyFile_Id, T1.MyFile_FileName, T1.MyFile_MyFileType, T1.MyFile_UserFileId)
    FROM (
        SELECT 
            T.Id AS MyFile_Id, 
            T.FileName AS MyFile_FileName, 
            CAST(T.MyFileType AS [MyTaskManagement.Models.MyFileType]) AS MyFile_MyFileType, 
            T.UserFileId AS MyFile_UserFileId, 
            True AS _from0
        FROM CodeFirstDatabase.MyFile AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRoles
        [MyTaskManagement.Models.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [MyTaskManagement.Models.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.ApplicationUser_Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUser_Projects
        [MyTaskManagement.Models.ApplicationUser_Projects](T3.[ApplicationUser_Projects.ApplicationUser_Projects_Source], T3.[ApplicationUser_Projects.ApplicationUser_Projects_Target])
    FROM (
        SELECT -- Constructing ApplicationUser_Projects_Source
            CreateRef(ApplicationDbContext.Users, row(T2.[ApplicationUser_Projects.ApplicationUser_Projects_Source.Id]), [MyTaskManagement.Models.ApplicationUser]) AS [ApplicationUser_Projects.ApplicationUser_Projects_Source], 
            T2.[ApplicationUser_Projects.ApplicationUser_Projects_Target]
        FROM (
            SELECT -- Constructing ApplicationUser_Projects_Target
                T1.[ApplicationUser_Projects.ApplicationUser_Projects_Source.Id], 
                CreateRef(ApplicationDbContext.Projects, row(T1.[ApplicationUser_Projects.ApplicationUser_Projects_Target.Id]), [MyTaskManagement.Models.Project]) AS [ApplicationUser_Projects.ApplicationUser_Projects_Target]
            FROM (
                SELECT 
                    T.ApplicationUser_Id AS [ApplicationUser_Projects.ApplicationUser_Projects_Source.Id], 
                    T.Project_Id AS [ApplicationUser_Projects.ApplicationUser_Projects_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.ApplicationUserProject AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ManagerProjectsTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ManagerProjectsTable
        [CodeFirstDatabaseSchema.ManagerProjectsTable](T1.ManagerProjectsTable_ProjectId, T1.ManagerProjectsTable_ManagerId)
    FROM (
        SELECT 
            T.ProjectId AS ManagerProjectsTable_ProjectId, 
            T.ManagerId AS ManagerProjectsTable_ManagerId, 
            True AS _from0
        FROM ApplicationDbContext.ManagerProjectsTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.ManagerProjectsTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ManagerProjectsTables
        [MyTaskManagement.Models.ManagerProjectsTable](T1.ManagerProjectsTable_ProjectId, T1.ManagerProjectsTable_ManagerId)
    FROM (
        SELECT 
            T.ProjectId AS ManagerProjectsTable_ProjectId, 
            T.ManagerId AS ManagerProjectsTable_ManagerId, 
            True AS _from0
        FROM CodeFirstDatabase.ManagerProjectsTable AS T
    ) AS T1");
        }
    }
}
